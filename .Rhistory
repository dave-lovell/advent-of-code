digit_number[c((x-1:x+1), (x+139):(x+141), (x-139):(x-141))]
(x+139):(x+141)
(x-139):(x-141)
c((x-1:x+1), (x+139):(x+141), (x-139):(x-141))
(x-139):(x-141)
(x-1:x+1)
x-1
x+1
geared_numbers <-
lapply(gear_indeces,
\(x){
geared <- digit_number[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
unique(geared)
})
geared_numbers[1]
geared_numbers[2]
digit_number[-1:1]
lengths(geared_numbers) |>
table()
geared_numbers
geared_numbers <-
lapply(gear_indeces,
\(x){
geared <- digit_number[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
unique(geared[geared != 0])
})
lengths(geared_numbers) |>
table()
valid_gears <- lengths(geared_numbers == 2)
valid_gears <- lengths(geared_numbers) == 2
valid_gears
gear_indeces
gear_indeces <- gear_indeces[valid_gears]
geared_numbers <- geared_numbers[valid_gears]
geared_numbers
map_dbl(geared_numbers, `*`)
map(geared_numbers, `*`) |>
reduce(sum)
map(geared_numbers, \(x) x[1] * x[2]) |>
reduce(sum)
valid_gears
a_bad_gear <- gear_indeces[!valid_gears][1]
a_bad_gear
x <- a_bad_gear
schematic[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
dim(bad_eg) <- c(3,3)
x <- a_bad_gear
bad_eg <- schematic[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
dim(bad_eg) <- c(3,3)
bad_eg
schematic[x]
shematic[x]
schematic[x]
schematic
x
474 %% 140
x <- a_bad_gear
bad_eg <- schematic[c((x-139):(x-141), (x-1):(x+1), (x+139):(x+141))]
dim(bad_eg) <- c(3,3)
t(bad_eg)
library(here)
library(fs)
library(purrr)
library(stringr)
library(dplyr)
schematic <- readLines(here("inputs", "engine-schematic.txt"))
nchar(schematic) |>
unique()
length(schematic)
schematic <- str_split(schematic, pattern = boundary("character"))
schematic <- reduce(schematic, c)
dim(schematic) <- c(140, 140)
schematic[1:15, 1:15]
working <- schematic
working[working == "."] <- ""
symbols <- str_detect(working, "\\D")
digits <-  str_detect(working, "\\d")
any(symbols & digits)
symbols <- as.vector(symbols)
symbol_borders <-
symbols |
lag(symbols, 1, default = FALSE)    |  # 1 shift left is TRUE
lead(symbols, 1, default = FALSE)   |  # 1 shift right is TRUE,
lag(symbols, 140, default = FALSE)  |  # row above is TRUE
lead(symbols, 140, default = FALSE) |  # row below is TRUE
lag(symbols, 141, default = FALSE)  |  # diagonals
lag(symbols, 139, default = FALSE)  |
lead(symbols, 141, default = FALSE) |
lead(symbols, 139, default = FALSE)
dim(symbol_borders) <- c(140, 140)
symbol_borders[1:20, 1:20]
bordering_digits <- digits & symbol_borders
sum(bordering_digits)
digit_vector <- as.vector(digits)
digit_border <- digit_vector != lag(digit_vector, 1, default = TRUE)
digit_starts <- digit_vector & digit_border
digit_number <- cumsum(digit_starts)
digit_number[!digit_vector] <- 0
digit_number[1:20]
which_border <-
digit_number[bordering_digits] |>
unique()
non_bordering <- setdiff(1:max(which_border), which_border)
non_bordering
which(digit_number == 1)
schematic[1:10, 1:10]
part_numbers <-
map_dbl(which_border,
\(x){
nums <- schematic[digit_number == x]
value <- as.numeric(paste(nums, collapse = ""))
value
})
sum(part_numbers)
gears <- working == "*"
gears <- as.vector(gears)
gear_borders <-
gears |
lag(gears, 1, default = FALSE)    |  # 1 shift left is TRUE
lead(gears, 1, default = FALSE)   |  # 1 shift right is TRUE,
lag(gears, 140, default = FALSE)  |  # row above is TRUE
lead(gears, 140, default = FALSE) |  # row below is TRUE
lag(gears, 141, default = FALSE)  |  # diagonals
lag(gears, 139, default = FALSE)  |
lead(gears, 141, default = FALSE) |
lead(gears, 139, default = FALSE)
gear_vector <- as.vector(gears)
gear_border <- gear_vector != lag(gear_vector, 1, default = TRUE)
gear_starts <- gear_vector & gear_border
gear_number <- cumsum(gear_starts)
gear_number[!gear_vector] <- 0
gear_indeces <- match(1:max(gear_number), gear_number)
working[gear_indeces[1]]
working[gear_indeces[312]]
geared_numbers <-
lapply(gear_indeces,
\(x){
geared <- digit_number[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
unique(geared[geared != 0])
})
lengths(geared_numbers) |>
table()
valid_gears <- lengths(geared_numbers) == 2
a_bad_gear <- gear_indeces[!valid_gears][1]
x <- a_bad_gear
bad_eg <- schematic[c((x-139):(x-141), (x-1):(x+1), (x+139):(x+141))]
dim(bad_eg) <- c(3,3)
t(bad_eg)
gear_indeces <- gear_indeces[valid_gears]
geared_numbers <- geared_numbers[valid_gears]
map(geared_numbers, \(x) x[1] * x[2]) |>
reduce(sum)
gears <- working == "*"
gears <- as.vector(gears)
gear_borders <-
gears |
lag(gears, 1, default = FALSE)    |  # 1 shift left is TRUE
lead(gears, 1, default = FALSE)   |  # 1 shift right is TRUE,
lag(gears, 140, default = FALSE)  |  # row above is TRUE
lead(gears, 140, default = FALSE) |  # row below is TRUE
lag(gears, 141, default = FALSE)  |  # diagonals
lag(gears, 139, default = FALSE)  |
lead(gears, 141, default = FALSE) |
lead(gears, 139, default = FALSE)
gear_vector <- as.vector(gears)
gear_border <- gear_vector != lag(gear_vector, 1, default = TRUE)
gear_starts <- gear_vector & gear_border
gear_starts
gear_vector <- as.vector(gears)
gear_border <- gear_vector != lag(gear_vector, 1, default = TRUE)
gear_border
gear_number <- cumsum(gear_vector)
gear_number
gear_number[!gear_vector] <- 0
gear_number
gear_indeces <- match(1:max(gear_number), gear_number)
gear_indeces
working[gear_indeces[1]]
working[gear_indeces[312]]
gear_indeces <- match(1:max(gear_number), gear_number)
gear_indeces
digit_number
geared_numbers <-
lapply(gear_indeces,
\(x){
geared <- digit_number[c((x-1):(x+1), (x+139):(x+141), (x-139):(x-141))]
unique(geared[geared != 0])
})
lengths(geared_numbers) |>
table()
geared_numbers
lengths(geared_numbers) |>
table()
geared_numbers[lengths(geared_numbers) == 1]
working
reduce(c(1,2), `*`)
q("no")
vroom(here("inputs", "scratchcards.txt"))
library(vroom)
library(vroom)
library(here)
library(dplyr)
scratch <- vroom(here("inputs", "scratchcards.txt"))
scratch
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch
library(tidyr)
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch
library(stringr)
scratch <- mutate(scratch,
card =
str_extract(scratch, "\\d+") |>
as.numeric())
?str_extract
scratch <- mutate(scratch,
card =
str_extract(scratch, "\\d+") |>
as.numeric())
scratch
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric())
scratch
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(winning))
scratch
scratch <-
separate_longer_delim(scratch, c(winning, have), delim = " ")
scratch
head(scratch)
scratch |>
group_by(card) |>
summarise(winners = sum(winning %in% have))
mutate(scratch, wins = winning %in% have)
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(winning))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <-
separate_longer_delim(scratch, c(winning), delim = " ")
scratch
scratch <-
separate_longer_delim(scratch, c(winning), delim = " ") |>
mutate(winning = as.numeric(winning))
scratch
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, c(winning), delim = " ") |>
mutate(winning = as.numeric(winning))
head(scratch)
scratch
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(winning = as.numeric(have))
head(scratch)
scratch
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(have = as.numeric(have))
head(scratch)
scratch
unique(scratch$winning)
unique(scratch$winning) |> str_count(" ")
str_split_fixed()
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 9)
)
scratch
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 9) |>
as.numeric()
)
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(have = as.numeric(have))
head(scratch)
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 9) |>
as.numeric()
)
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 9) |>
as.numeric() |>
list()
)
scratch
scratch
scratch$winning
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(have = as.numeric(have))
scratch
foo <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 10) |>
as.numeric() |>
list()
)
foo
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 10) |>
as.numeric() |>
list()
)
scratch
scratch |>
mutate(wins = have %in% winning)
scratch$winning[1]
scratch |>
mutate(wins = have %in% winning) |>
summarise(winners = sum(wins), .by = card)
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(have = as.numeric(have))
head(scratch)
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 10) |>
as.numeric() |>
list()
) |>
ungroup()
scratch |>
mutate(wins = have %in% winning) |>
summarise(winners = sum(wins), .by = card)
scratch |>
mutate(wins = have %in% winning)
scratch |>
rowwise() |>
mutate(wins = have %in% winning) |>
group_by(card) |>
summarise(winners = sum(wins))
scratch <-
scratch |>
rowwise() |>
mutate(wins = have %in% winning) |>
group_by(card) |>
summarise(winners = sum(wins), .groups = "drop") |>
mutate(points = 1 * 2^winners)
scratch
1 * 2^-1
1 * 2^0
1 * 2^-1
scratch <-
scratch |>
rowwise() |>
mutate(wins = have %in% winning) |>
group_by(card) |>
summarise(winners = sum(wins), .groups = "drop") |>
mutate(points = (winners > 0) * 2^(winners - 1))
library(vroom)
library(here)
library(dplyr)
library(tidyr)
library(stringr)
scratch <- vroom(here("inputs", "scratchcards.txt"),
col_types = "cc", col_names = c("winning", "have"))
scratch <- separate_wider_delim(scratch, winning, delim = ":",
names = c("card", "winning"))
scratch <- mutate(scratch,
card =
str_extract(card, "\\d+") |>
as.numeric(),
winning = str_squish(winning),
have    = str_squish(have))
scratch <-
separate_longer_delim(scratch, have, delim = " ") |>
mutate(have = as.numeric(have))
head(scratch)
scratch <-
rowwise(scratch) |>
mutate(
winning = str_split_fixed(winning , " ", 10) |>
as.numeric() |>
list()
) |>
ungroup()
scratch <-
scratch |>
rowwise() |>
mutate(wins = have %in% winning) |>
group_by(card) |>
summarise(winners = sum(wins), .groups = "drop") |>
mutate(points = (winners > 0) * 2^(winners - 1))
total_points <- sum(scratch[["points"]])
total_points
